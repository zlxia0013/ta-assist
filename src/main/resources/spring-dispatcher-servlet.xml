<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
    <mvc:annotation-driven>
		<!-- 启动JSON格式的配置 -->
   		<mvc:message-converters>  
	   		<!-- 这里也可以自己定制class -->
	        <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">  
	            <property name="supportedMediaTypes">  
	                <list>  
	                    <value>text/html;charset=UTF-8</value>  <!-- 避免IE出现下载JSON文件的情况 -->
	                </list>  
	            </property>    
	        </bean>  
	    </mvc:message-converters>  
   	</mvc:annotation-driven>
   	
    <context:component-scan base-package="com.tc.ta.interfaces.http" />

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />  <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
    </bean>  
    <mvc:view-controller path="/" view-name="forward:/index.jsp"/>

    <!-- 支持上传文件 -->  
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="UTF-8" />	
		
	<!--配置拦截器, 多个拦截器,顺序执行 --> 
	<mvc:interceptors>  
		<mvc:interceptor>  
			<!-- 
				/**的意思是所有文件夹及里面的子文件夹
				/*是所有文件夹，不含子文件夹
				/是web项目的根目录 
			-->
			<mvc:mapping path="/**" />
			<!-- mvc:mapping path="/**" /-->
			<bean class="com.tc.ta.common.web.CommonInterceptor"></bean>
		</mvc:interceptor>
		<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>

</beans>   